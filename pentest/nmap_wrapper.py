"""
Nmap Wrapper Module

Provides comprehensive nmap functionality with standardized interfaces.
Part of the instability.py v3 pentesting toolkit.
"""

import subprocess
import json
import xml.etree.ElementTree as ET
import re
import os
from typing import Dict, Any, List, Optional, Union
from datetime import datetime
from colorama import Fore

from pentest.tool_detector import detect_tool_installation

def run_nmap_scan(target: str, scan_type: str = "basic", ports: str = None, 
                 output_format: str = "dict", timeout: int = 300, silent: bool = False) -> Dict[str, Any]:
    """
    Run nmap scan with specified parameters.
    
    Args:
        target: Target IP, hostname, or CIDR range
        scan_type: Type of scan (basic, syn, udp, comprehensive, stealth, version, os)
        ports: Port specification (e.g., "80,443", "1-1000", "top-ports 100")
        output_format: Output format (dict, xml, json)
        timeout: Scan timeout in seconds
        silent: Suppress console output if True
        
    Returns:
        Dict containing scan results and metadata
    """
    if not silent:
        is_privileged = (os.getuid() == 0) if hasattr(os, 'getuid') else False
        privilege_note = " (privileged)" if is_privileged else " (unprivileged)"
        print(f"{Fore.CYAN}Running nmap {scan_type} scan{privilege_note} on {target}...{Fore.RESET}")
    
    result = {
        "success": False,
        "scan_type": scan_type,
        "target": target,
        "ports_scanned": ports,
        "start_time": datetime.now().isoformat(),
        "end_time": None,
        "duration_seconds": None,
        "hosts_found": 0,
        "ports_found": 0,
        "hosts": {},
        "summary": None,
        "raw_output": None,
        "error": None
    }
    
    # Check if nmap is available
    nmap_check = detect_tool_installation("nmap")
    if not nmap_check["found"]:
        result["error"] = "nmap not found. Please install nmap first."
        if not silent:
            print(f"{Fore.RED}âœ— nmap not found. Install with: {nmap_check.get('install_command', 'package manager')}{Fore.RESET}")
        return result
    
    nmap_path = nmap_check["path"]
    
    try:
        # Build nmap command
        cmd = _build_nmap_command(nmap_path, target, scan_type, ports)
        
        if not silent:
            print(f"{Fore.YELLOW}Executing: {' '.join(cmd)}{Fore.RESET}")
        
        start_time = datetime.now()
        
        # Execute nmap
        process = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=timeout
        )
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        result["end_time"] = end_time.isoformat()
        result["duration_seconds"] = round(duration, 2)
        result["raw_output"] = process.stdout
        
        if process.returncode == 0:
            # Parse nmap output
            parsed_results = _parse_nmap_output(process.stdout, scan_type)
            result.update(parsed_results)
            result["success"] = True
            
            if not silent:
                print(f"{Fore.GREEN}âœ“ Scan completed in {duration:.1f}s{Fore.RESET}")
                print(f"{Fore.GREEN}  Found {result['hosts_found']} hosts, {result['ports_found']} open ports{Fore.RESET}")
        else:
            stderr_text = process.stderr.strip()
            result["error"] = f"nmap failed: {stderr_text}"
            
            # Check for privilege-related errors and provide helpful suggestions
            if "requires root privileges" in stderr_text.lower():
                suggestion = "\nSuggestion: Run nmap with TCP connect scan (-sT) or run as root for SYN scans"
                result["error"] += suggestion
                if not silent:
                    print(f"{Fore.RED}âœ— nmap failed: {stderr_text}{Fore.RESET}")
                    print(f"{Fore.YELLOW}ðŸ’¡ Tip: This scan type requires root privileges. Try running as root or use TCP connect scans.{Fore.RESET}")
            else:
                if not silent:
                    print(f"{Fore.RED}âœ— nmap failed: {stderr_text}{Fore.RESET}")
    
    except subprocess.TimeoutExpired:
        result["error"] = f"Scan timeout after {timeout}s"
        if not silent:
            print(f"{Fore.RED}âœ— Scan timeout after {timeout}s{Fore.RESET}")
    
    except Exception as e:
        result["error"] = f"Unexpected error: {str(e)}"
        if not silent:
            print(f"{Fore.RED}âœ— Error: {e}{Fore.RESET}")
    
    return result

def quick_port_scan(target: str, ports: str = "80,443,22,21,25,53,110,143,993,995", silent: bool = False) -> Dict[str, Any]:
    """
    Quick port scan for common services.
    
    Args:
        target: Target IP or hostname
        ports: Comma-separated list of ports to scan
        silent: Suppress console output if True
        
    Returns:
        Dict containing scan results
    """
    return run_nmap_scan(
        target=target,
        scan_type="basic",
        ports=ports,
        timeout=60,
        silent=silent
    )

def network_discovery(network: str, silent: bool = False) -> Dict[str, Any]:
    """
    Discover live hosts on a network.
    
    Args:
        network: Network in CIDR notation (e.g., "192.168.1.0/24")
        silent: Suppress console output if True
        
    Returns:
        Dict containing discovered hosts
    """
    return run_nmap_scan(
        target=network,
        scan_type="ping",
        timeout=120,
        silent=silent
    )

def service_version_scan(target: str, ports: str = None, silent: bool = False) -> Dict[str, Any]:
    """
    Scan for service versions on open ports.
    
    Args:
        target: Target IP or hostname
        ports: Port specification (default: common ports)
        silent: Suppress console output if True
        
    Returns:
        Dict containing service version information
    """
    return run_nmap_scan(
        target=target,
        scan_type="version",
        ports=ports or "top-ports 1000",
        timeout=300,
        silent=silent
    )

def os_detection_scan(target: str, silent: bool = False) -> Dict[str, Any]:
    """
    Attempt to detect target operating system.
    
    Args:
        target: Target IP or hostname
        silent: Suppress console output if True
        
    Returns:
        Dict containing OS detection results
    """
    return run_nmap_scan(
        target=target,
        scan_type="os",
        timeout=180,
        silent=silent
    )

def comprehensive_scan(target: str, silent: bool = False) -> Dict[str, Any]:
    """
    Comprehensive scan with service detection and OS fingerprinting.
    
    Args:
        target: Target IP or hostname
        silent: Suppress console output if True
        
    Returns:
        Dict containing comprehensive scan results
    """
    return run_nmap_scan(
        target=target,
        scan_type="comprehensive",
        timeout=600,
        silent=silent
    )

def _build_nmap_command(nmap_path: str, target: str, scan_type: str, ports: str = None) -> List[str]:
    """
    Build nmap command based on scan type and parameters.
    
    Args:
        nmap_path: Path to nmap executable
        target: Target specification
        scan_type: Type of scan to perform
        ports: Port specification
        
    Returns:
        List of command arguments
    """
    cmd = [nmap_path]
    
    # Check if we're running with privileges
    is_privileged = os.getuid() == 0 if hasattr(os, 'getuid') else False
    
    # Base scan type configurations - use unprivileged scans by default
    if is_privileged:
        # Privileged scan configurations
        scan_configs = {
            "basic": ["-sS"],  # SYN scan
            "syn": ["-sS"],
            "tcp": ["-sT"],    # TCP connect scan
            "udp": ["-sU"],    # UDP scan
            "ping": ["-sn"],   # Ping scan (no port scan)
            "stealth": ["-sS", "-f", "-T2"],  # Stealth scan
            "version": ["-sV"],  # Version detection
            "os": ["-O"],      # OS detection
            "comprehensive": ["-sS", "-sV", "-O", "-A"],  # Comprehensive
            "aggressive": ["-A", "-T4"],  # Aggressive scan
        }
    else:
        # Unprivileged scan configurations
        scan_configs = {
            "basic": ["-sT"],  # TCP connect scan (no root required)
            "syn": ["-sT"],    # Fallback to TCP connect
            "tcp": ["-sT"],    # TCP connect scan
            "udp": ["-sU"],    # UDP scan (may still need privileges on some systems)
            "ping": ["-sn"],   # Ping scan (no port scan)
            "stealth": ["-sT", "-T2"],  # Stealth TCP connect
            "version": ["-sT", "-sV"],  # Version detection with TCP connect
            "os": ["-sT"],     # OS detection requires privileges, fallback to TCP
            "comprehensive": ["-sT", "-sV", "-A"],  # Comprehensive without privileged features
            "aggressive": ["-sT", "-A", "-T4"],  # Aggressive scan with TCP connect
        }
    
    # Add scan type flags
    if scan_type in scan_configs:
        cmd.extend(scan_configs[scan_type])
    else:
        # Default to TCP connect scan (works without privileges)
        cmd.extend(["-sT"])
    
    # Add port specification
    if ports and scan_type != "ping":
        if ports.startswith("top-ports"):
            # Handle top-ports specification
            num_ports = ports.split()[-1]
            cmd.extend(["--top-ports", num_ports])
        elif "," in ports or "-" in ports:
            # Handle port list or range
            cmd.extend(["-p", ports])
        else:
            # Single port
            cmd.extend(["-p", ports])
    elif scan_type == "udp":
        # Default UDP ports if none specified
        cmd.extend(["--top-ports", "100"])
    
    # Add common useful flags
    cmd.extend([
        "-n",           # No DNS resolution (faster)
        "--open",       # Only show open ports
        "--reason",     # Show reason for port state
    ])
    
    # Add timing template based on scan type
    if scan_type == "stealth":
        cmd.extend(["-T2"])  # Polite timing
    elif scan_type in ["comprehensive", "aggressive"]:
        cmd.extend(["-T4"])  # Aggressive timing
    else:
        cmd.extend(["-T3"])  # Normal timing
    
    # Add target
    cmd.append(target)
    
    return cmd

def _parse_nmap_output(output: str, scan_type: str) -> Dict[str, Any]:
    """
    Parse nmap text output into structured data.
    
    Args:
        output: Raw nmap output text
        scan_type: Type of scan that was performed
        
    Returns:
        Dict containing parsed results
    """
    result = {
        "hosts_found": 0,
        "ports_found": 0,
        "hosts": {},
        "summary": None
    }
    
    lines = output.split('\n')
    current_host = None
    
    for line in lines:
        line = line.strip()
        
        # Parse host information
        host_match = re.search(r'Nmap scan report for (.+)', line)
        if host_match:
            host_info = host_match.group(1)
            
            # Extract IP and hostname if present
            if '(' in host_info and ')' in host_info:
                # Format: hostname (ip)
                hostname = host_info.split('(')[0].strip()
                ip = host_info.split('(')[1].split(')')[0].strip()
            else:
                # Just IP or hostname
                hostname = None
                ip = host_info.strip()
            
            current_host = ip
            result["hosts"][current_host] = {
                "ip": ip,
                "hostname": hostname,
                "status": "up",
                "ports": {},
                "os_info": None,
                "mac_address": None
            }
            result["hosts_found"] += 1
            continue
        
        # Parse port information
        if current_host and '/' in line and ('open' in line or 'closed' in line or 'filtered' in line):
            port_match = re.search(r'(\d+)/(tcp|udp)\s+(\w+)\s+(.+)', line)
            if port_match:
                port_num = port_match.group(1)
                protocol = port_match.group(2)
                state = port_match.group(3)
                service_info = port_match.group(4).strip()
                
                port_key = f"{port_num}/{protocol}"
                result["hosts"][current_host]["ports"][port_key] = {
                    "port": int(port_num),
                    "protocol": protocol,
                    "state": state,
                    "service": service_info,
                    "version": None
                }
                
                if state == "open":
                    result["ports_found"] += 1
                
                # Parse service version if available
                if ' ' in service_info:
                    parts = service_info.split(' ', 1)
                    result["hosts"][current_host]["ports"][port_key]["service"] = parts[0]
                    result["hosts"][current_host]["ports"][port_key]["version"] = parts[1]
        
        # Parse OS detection
        if current_host and line.startswith('Running:'):
            os_info = line.replace('Running:', '').strip()
            result["hosts"][current_host]["os_info"] = os_info
        
        # Parse MAC address
        if current_host and line.startswith('MAC Address:'):
            mac_match = re.search(r'MAC Address: ([A-Fa-f0-9:]{17})', line)
            if mac_match:
                result["hosts"][current_host]["mac_address"] = mac_match.group(1)
        
        # Parse summary line
        if 'Nmap done:' in line:
            result["summary"] = line.strip()
    
    return result

def generate_scan_report(scan_result: Dict[str, Any], format_type: str = "text") -> str:
    """
    Generate formatted scan report.
    
    Args:
        scan_result: Result dictionary from nmap scan
        format_type: Report format (text, json, markdown)
        
    Returns:
        Formatted report string
    """
    if format_type == "json":
        return json.dumps(scan_result, indent=2)
    
    elif format_type == "markdown":
        return _generate_markdown_report(scan_result)
    
    else:  # text format
        return _generate_text_report(scan_result)

def _generate_text_report(scan_result: Dict[str, Any]) -> str:
    """Generate text format report."""
    report = []
    report.append(f"Nmap Scan Report")
    report.append(f"{'=' * 50}")
    report.append(f"Scan Type: {scan_result.get('scan_type', 'unknown')}")
    report.append(f"Target: {scan_result.get('target', 'unknown')}")
    report.append(f"Start Time: {scan_result.get('start_time', 'unknown')}")
    report.append(f"Duration: {scan_result.get('duration_seconds', 0)}s")
    report.append(f"Hosts Found: {scan_result.get('hosts_found', 0)}")
    report.append(f"Open Ports: {scan_result.get('ports_found', 0)}")
    report.append("")
    
    for host_ip, host_data in scan_result.get("hosts", {}).items():
        report.append(f"Host: {host_ip}")
        if host_data.get("hostname"):
            report.append(f"   Hostname: {host_data['hostname']}")
        if host_data.get("mac_address"):
            report.append(f"   MAC: {host_data['mac_address']}")
        if host_data.get("os_info"):
            report.append(f"   OS: {host_data['os_info']}")
        
        open_ports = [p for p, data in host_data.get("ports", {}).items() if data["state"] == "open"]
        if open_ports:
            report.append(f"   Open Ports:")
            for port_key in open_ports:
                port_data = host_data["ports"][port_key]
                service = port_data.get("service", "unknown")
                version = port_data.get("version", "")
                report.append(f"     {port_key} - {service} {version}".strip())
        report.append("")
    
    if scan_result.get("summary"):
        report.append(f"Summary: {scan_result['summary']}")
    
    return "\n".join(report)

def _generate_markdown_report(scan_result: Dict[str, Any]) -> str:
    """Generate markdown format report."""
    report = []
    report.append("# Nmap Scan Report")
    report.append("")
    report.append("## Scan Details")
    report.append(f"- **Scan Type:** {scan_result.get('scan_type', 'unknown')}")
    report.append(f"- **Target:** {scan_result.get('target', 'unknown')}")
    report.append(f"- **Start Time:** {scan_result.get('start_time', 'unknown')}")
    report.append(f"- **Duration:** {scan_result.get('duration_seconds', 0)}s")
    report.append(f"- **Hosts Found:** {scan_result.get('hosts_found', 0)}")
    report.append(f"- **Open Ports:** {scan_result.get('ports_found', 0)}")
    report.append("")
    
    if scan_result.get("hosts"):
        report.append("## Host Results")
        
        for host_ip, host_data in scan_result["hosts"].items():
            report.append(f"### {host_ip}")
            
            if host_data.get("hostname"):
                report.append(f"**Hostname:** {host_data['hostname']}")
            if host_data.get("mac_address"):
                report.append(f"**MAC Address:** {host_data['mac_address']}")
            if host_data.get("os_info"):
                report.append(f"**OS:** {host_data['os_info']}")
            
            open_ports = [p for p, data in host_data.get("ports", {}).items() if data["state"] == "open"]
            if open_ports:
                report.append("")
                report.append("**Open Ports:**")
                report.append("| Port | Service | Version |")
                report.append("|------|---------|---------|")
                
                for port_key in open_ports:
                    port_data = host_data["ports"][port_key]
                    service = port_data.get("service", "unknown")
                    version = port_data.get("version", "")
                    report.append(f"| {port_key} | {service} | {version} |")
            
            report.append("")
    
    if scan_result.get("summary"):
        report.append("## Summary")
        report.append(f"{scan_result['summary']}")
    
    return "\n".join(report)

# Quick test function for development
def test_nmap_wrapper():
    """Test function for development purposes."""
    print("Testing nmap wrapper module...")
    
    # Test nmap detection
    print("\n1. Testing nmap detection:")
    nmap_check = detect_tool_installation("nmap")
    if nmap_check["found"]:
        print(f"   âœ“ nmap found at: {nmap_check['path']}")
        if nmap_check.get("version"):
            print(f"   âœ“ Version: {nmap_check['version']}")
    else:
        print(f"   âœ— nmap not found. Install with: {nmap_check.get('install_command', 'package manager')}")
        return
    
    # Test localhost scan
    print("\n2. Testing quick localhost scan:")
    result = quick_port_scan("127.0.0.1", ports="22,80,443", silent=False)
    
    if result["success"]:
        print("   âœ“ Scan completed successfully")
        report = generate_scan_report(result, "text")
        print("\n3. Generated report:")
        print(report)
    else:
        print(f"   âœ— Scan failed: {result.get('error', 'Unknown error')}")
    
    return result

if __name__ == "__main__":
    test_nmap_wrapper()